//This One IS WORKING

pipeline {
    agent any

    environment {
        // Environment variables for server and tools configuration
        DEV_SERVER = 'DEV_SERVER'
        REMOTE_DIR = '/home/ubuntu/karan'
        BITBUCKET_CREDENTIALS = credentials('bitbucket-credentials')
        SONAR_SCANNER_HOME = '/opt/sonar-scanner'
        SONAR_LOGIN = credentials('sonar-login')
        SONAR_PASSWORD = credentials('sonar-password')
    }

    stages {
        stage('Pull Code') {
            steps {
                script {
                    echo 'Pulling latest code from Git repository on the development server...'
                    sshExecute(
                        server: env.DEV_SERVER,
                        command: """
                            cd ${env.REMOTE_DIR} &&
                            git pull https://${BITBUCKET_CREDENTIALS_USR}:${BITBUCKET_CREDENTIALS_PSW}@bitbucket.org/karanravat60/f.git main
                        """
                    )
                }
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                script {
                    echo 'Running SonarQube analysis on the development server...'
                    sshExecute(
                        server: env.DEV_SERVER,
                        command: """
                            cd ${env.REMOTE_DIR} &&
                            ${env.SONAR_SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.login=${env.SONAR_LOGIN} \
                            -Dsonar.password=${env.SONAR_PASSWORD} \
                            -Dsonar.projectKey=karanravat60_f_AZA0eKciRsPmJH3GzNfr
                        """
                    )
                }
            }
        }

// In Your project / Project settings, select Webhooks,  set the url to https://YOUR_JENKINS_URL/sonarqube-webhook/

        stage('Build Project') {
            steps {
                script {
                    echo 'Building the project...'
                    sshExecute(
                        server: env.DEV_SERVER,
                        command: """
                            cd ${env.REMOTE_DIR} 
                            echo "HI"
                            """
                    )
                }
            }
        }

        stage('Deploy Project') {
            steps {
                script {
                    echo 'Deploying the project...'
                    sshExecute(
                        server: env.DEV_SERVER,
                        command: """
                        echo HI
                        """
                    )
                }
            }
        }
    }

    post {
        success {
            script {
                echo 'Pipeline completed successfully.'
                // Notify success to Hangouts Chat using the specified token
                //hangoutsNotifySuccess(token: "6r06vPcpo0OGPj")
            }
        }
        failure {
            script {
                echo 'Pipeline failed. Please check the logs for details.'
            }
        }
    }
}

// Define a reusable function for SSH execution to avoid redundancy
def sshExecute(Map params) {
    sshPublisher(
        publishers: [
            sshPublisherDesc(
                configName: params.server,
                transfers: [
                    sshTransfer(
                        sourceFiles: '',
                        execCommand: params.command,
                        execTimeout: params.timeout ?: 60000, // Default timeout if not specified
                        usePty: true
                    )
                ],
                usePromotionTimestamp: false,
                verbose: true
            )
        ]
    )
}
